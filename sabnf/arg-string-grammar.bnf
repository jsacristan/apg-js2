;*******************************************************************************
;  APG - an ABNF Parser Generator
;  JavaScript APG Version 2.0
;  Copyright (C) 2015 Lowell D. Thomas, all rights reserved
;
;  author:  Lowell D. Thomas
;  email:   lowell@coasttocoastresearch.com
;*******************************************************************************
; Grammar for a command line of arguments.
; 
; Arguments will consist of main() arguments plus arguments extracted from any
; files appearing as @filename main() arguments.
; The list of arguments represented in this grammar will be tokens of printing
; characters separated by a special separator character (LF in this case).
; All quoted strings from the original command line or @filename command file
; will have been processed to remove the leading and trailing quotes.
; All tabs will have been converted to spaces.
;

; This grammar describes a string of parameters.
; Flag parameters are single token parameters (e.g. --verbose)
; Value parameters can be single token (--in=<file>) or double token parameters (-in <file>)
; The string may be empty (no parameters).
;
file         = *param
param        = in
             / html
             / js-lang
             / java-lang
             / c-lang
             / cpp-lang
             / (flag-param / other) %d10
other        = 1*%d32-126

flag-param   = compressed
             / help
             / version
             / strict
             / crlf
             / linefeed

value-param  = in
             / html
             / cpp-lang
             / c-lang
             / js-lang
             / java-lang

; flag parameters
help         = ('-h' / '--help' / '?' )
version      = ('-v' / '--version' )
strict       = ('-s' / '--strict' )
crlf         = ('-r' / '--CRLF' )
linefeed     = ('-l' / '--LF' )
compressed   = %d45 1*(%d97-122/%d65-90)

; value parameters
in          = in-short / in-long
in-long     = '--in=' cdvalue %d10
in-short    = '-in' %d10 cdvalue %d10
html        = html-short / html-long
html-long   = '--HTML'  html-value %d10
html-short  = '-html' %d10  html-value %d10
c-lang      = c-short / c-long
c-long      = '--C=' [lang-value] %d10
c-short     = '-c' %d10 [lang-value %d10]
cpp-lang    = cpp-short / cpp-long
cpp-long    = '--C++=' [lang-value] %d10
cpp-short   = '-c++' %d10 [lang-value %d10]
js-lang     = js-short / js-long
js-long     = '--JavaScript=' [lang-value] %d10
js-short    = '-js' %d10 [lang-value %d10]
java-lang   = java-short / java-long
java-long   = '--Java=' [lang-value] %d10
java-short  = '-java' %d10 [lang-value %d10]

; core
cdvalue     = invalue *(*%d32 %d44 *%d32 invalue) 
invalue     = (%d33-43/%d45-126) *(%d33-43/%d45-126)
html-value  = 1*%d33-126
lang-value  = (%d33-44/%d46-126) *%d33-126
              ; can be empty, first character cannot be hyphen "-" if not empty
